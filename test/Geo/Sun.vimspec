Describe Geo.Sun
  Before all
    let Sun = vital#vital#new().import('Geo.Sun')
    let DateTime = vital#vital#new().import('DateTime')
    let Promise  = vital#vital#new().import('Async.Promise')
    let Process  = vital#vital#new().import('Async.Promise.Process')
  End

  Describe .new()
    It object creation check.
      let obj = Sun.new(['curl'])
      Assert NotEquals(obj, v:null, 'create object')
      Assert Equals(type(obj), type({}), 'create object type')
    End
  End

  Context Sun object
    Describe .resolve()
      It object resolve work fine check.
        let obj = Sun.new(['curl'])
        call obj.resolve(140 ,35)
        Assert NotEquals(obj.status, v:null, 'object result status')
      End
      It object resolve work typical data check.
        let obj = Sun.new(['curl'])
        " 1564617600 = 2019-08-01T00:00:00+09:00
        call obj.resolve(140 ,35, DateTime.from_unix_time(1564617600))
        Assert NotEquals(obj.status, v:null, 'object result status')

        " test page https://sunrise-sunset.org/search?location=Tokyo&year=2019&month=8#calendar
        let sunrise = '2019-07-31T19:47:38+0000'
        let sunset  = '2019-08-01T09:45:08+0000'
        let sunriseobj = DateTime.from_format(sunrise, '%FT%T%z')
        let sunsetobj  = DateTime.from_format(sunset, '%FT%T%z')
        Assert Equals(obj.result.sunrise.compare(sunriseobj), 0, "sunrise diff")
        Assert Equals(obj.result.sunset.compare(sunsetobj)  , 0, "sunset diff" )
      End
    End
    Describe .resolveAsync()
      It object resolve async work fine check.
        if Process.is_available()
          let obj = Sun.new(['curl'])
          let promise = obj.resolveAsync(140 ,35)
          call Promise.wait(promise)
          Assert NotEquals(obj.status, v:null, 'object result status')
        else
          Skip not support
        endif
      End
      It object resolve async work typical data check.
        if Process.is_available()
          let obj = Sun.new(['curl'])
          " 1564617600 = 2019-08-01T00:00:00+09:00
          let promise = obj.resolveAsync(140 ,35, DateTime.from_unix_time(1564617600))
          call Promise.wait(promise)
          Assert NotEquals(obj.status, v:null, 'object result status')

          " test page https://sunrise-sunset.org/search?location=Tokyo&year=2019&month=8#calendar
          let sunrise = '2019-07-31T19:47:38+0000'
          let sunset  = '2019-08-01T09:45:08+0000'
          let sunriseobj = DateTime.from_format(sunrise, '%FT%T%z')
          let sunsetobj  = DateTime.from_format(sunset, '%FT%T%z')
          Assert Equals(obj.result.sunrise.compare(sunriseobj), 0, "sunrise diff")
          Assert Equals(obj.result.sunset.compare(sunsetobj)  , 0, "sunset diff" )
        else
          Skip not support
        endif
      End
    End
  End
End
